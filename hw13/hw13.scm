(+ 3 4)
(* (+ 3 4) 2)
((car (list + - * /)) 2 3)
((car (cdr (list + - * /))) 17 5)
(let ((x 2))
(+ x 3))
(let ((y 3))
  (+ 2 y))
(+ (* 4 4) (* 4 4))
(let ((a (* 4 4))) (+ a a))
(let ([list1 '(a b c)] [list2 '(d e f)])
  (cons (cons (car list1)
              (car list2))
        (cons (car (cdr list1))
              (car (cdr list2)))))
(let ([f +])
  (f 2 3))
(let ([f +] [x 2])
  (f x 3))
(let ([f +] [x 2] [y 3])
  (f x y))
(let ([+ *])
  (+ 2 3))
(let ([a 4] [b -3])
  (let ([a-squared (* a a)]
        [b-squared (* b b)])
    (+ a-squared b-squared)))
(let ([x 1])
  (let ([x (+ x 1)])
    (+ x x))) 
(let ([x 1])
  (let ([new-x (+ x 1)])
    (+ new-x new-x)))
(+ (- (* 3 a) b) (+ (* 3 a) b))